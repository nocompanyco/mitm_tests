iterate through lib types in sequence (not async)


LOAD pcap



PACKET (pcap):
PacketWithHeader {
  buf: <Buffer 08 96 d7 96 98 99 3c a9 f4 21 00 7c 08 00 45 00 00 db c8 7c 40 00 40 06 f0 45 c0 a8 b2 1a 45 ac c8 eb ed ec 00 50 35 cb 07 91 0f 10 41 a2 50 18 01 f6 ... 65485 more bytes>,
  header: <Buffer 65 68 c8 5e 06 3e 0c 00 e9 00 00 00 e9 00 00 00>,
  link_type: 'LINKTYPE_ETHERNET'
}
PACKET DECODED:
PcapPacket {
  link_type: 'LINKTYPE_ETHERNET',
  pcap_header: PcapHeader {
    tv_sec: 1590192229,
    tv_usec: 802310,
    caplen: 233,
    len: 233
  },
  payload: EthernetPacket {
    emitter: undefined,
    dhost: EthernetAddr { addr: [Array] },
    shost: EthernetAddr { addr: [Array] },
    ethertype: 2048,
    vlan: null,
    payload: IPv4 {
      emitter: undefined,
      version: 4,
      headerLength: 20,
      diffserv: 0,
      length: 219,
      identification: 51324,
      flags: [IPFlags],
      fragmentOffset: 0,
      ttl: 64,
      protocol: 6,
      headerChecksum: 61509,
      saddr: [IPv4Addr],
      daddr: [IPv4Addr],
      protocolName: undefined,
      payload: [TCP]
    }
  },
  emitter: undefined
}

PACKET (pcap):
PacketWithHeader {
  buf: <Buffer 3c a9 f4 21 00 7c 08 96 d7 96 98 99 08 00 45 00 02 4f 6a 39 40 00 39 06 54 15 45 ac c8 eb c0 a8 b2 1a 00 50 ed ec 0f 10 41 a2 35 cb 08 44 50 18 00 ed ... 65485 more bytes>,
  header: <Buffer 65 68 c8 5e 2f c0 0c 00 5d 02 00 00 5d 02 00 00>,
  link_type: 'LINKTYPE_ETHERNET'
}
PACKET DECODED:
PcapPacket {
  link_type: 'LINKTYPE_ETHERNET',
  pcap_header: PcapHeader {
    tv_sec: 1590192229,
    tv_usec: 835631,
    caplen: 605,
    len: 605
  },
  payload: EthernetPacket {
    emitter: undefined,
    dhost: EthernetAddr { addr: [Array] },
    shost: EthernetAddr { addr: [Array] },
    ethertype: 2048,
    vlan: null,
    payload: IPv4 {
      emitter: undefined,
      version: 4,
      headerLength: 20,
      diffserv: 0,
      length: 591,
      identification: 27193,
      flags: [IPFlags],
      fragmentOffset: 0,
      ttl: 57,
      protocol: 6,
      headerChecksum: 21525,
      saddr: [IPv4Addr],
      daddr: [IPv4Addr],
      protocolName: undefined,
      payload: [TCP]
    }
  },
  emitter: undefined
}

PACKET (pcap):
PacketWithHeader {
  buf: <Buffer 3c a9 f4 21 00 7c 08 96 d7 96 98 99 08 00 45 00 00 2d 6a 3a 40 00 39 06 56 36 45 ac c8 eb c0 a8 b2 1a 00 50 ed ec 0f 10 43 c9 35 cb 08 44 50 18 00 ed ... 65485 more bytes>,
  header: <Buffer 65 68 c8 5e 6e 51 0d 00 3b 00 00 00 3b 00 00 00>,
  link_type: 'LINKTYPE_ETHERNET'
}
PACKET DECODED:
PcapPacket {
  link_type: 'LINKTYPE_ETHERNET',
  pcap_header: PcapHeader {
    tv_sec: 1590192229,
    tv_usec: 872814,
    caplen: 59,
    len: 59
  },
  payload: EthernetPacket {
    emitter: undefined,
    dhost: EthernetAddr { addr: [Array] },
    shost: EthernetAddr { addr: [Array] },
    ethertype: 2048,
    vlan: null,
    payload: IPv4 {
      emitter: undefined,
      version: 4,
      headerLength: 20,
      diffserv: 0,
      length: 45,
      identification: 27194,
      flags: [IPFlags],
      fragmentOffset: 0,
      ttl: 57,
      protocol: 6,
      headerChecksum: 22070,
      saddr: [IPv4Addr],
      daddr: [IPv4Addr],
      protocolName: undefined,
      payload: [TCP]
    }
  },
  emitter: undefined
}

COMPLETED pcap




LOAD cap


cap CANT LOAD FILE. SKIPPING
see pcap_lookupnet shttps://github.com/mscdex/cap/blob/master/src/binding.cc#L314


LOAD node-capture


